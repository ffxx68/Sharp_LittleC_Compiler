.ORG	0xE030
; Unsigned Integer to String conversion 
; Conversion of a binary number (16bit) to a BCD format copied from PC-1403 ROM @1446
; The 2-byte binary number to be converted is stored in the 16-bit X CPU register (06,07)
; The converted string is assumed to be allocated already and pointed by Y (04,05)
; CPU registers A, B, I, J, K, Xfloat (10-17) and Yfloat (18-1F) are all affected
INT2STR_LIB:
			; 1 - converting X to BCD at ( 12 13 14 ) 
			LP		0x10
			LII		0x0F
			LIA		0x00
			FILM             ; 0 -> floatX, floatY (10..1F)
			LP		0x1C    
			ORIM	0x10     ; (1C) BCD set to 10 decimal - starting value for multiplier
			LP		0x08     ; K
			LIA		0x07
			EXAM             ; 7 --> K : bit counter
			LP		0x04     ; X-low
			LDM	             
			CALL	INT2STR_L0  ; convert byte
			LIA		0x07
			LP		0x08    
			EXAM             ; 7 --> K ; bit counter?
			LP		0x05     ; X-high
			LDM	             
			CALL	INT2STR_L0  ; convert byte
			
			; 2 - converting each BCD nibble to ASCII
			LIB     0x00     ; reset first 0-digit flag (B)
			LP		0x12     ; starting BCD location
			DY               ; setting correct starting address
INT2STR_L1:
			LDM	
			PUSH	; 1st BCD byte, save
			SWP	    ; high nibble first
			CALL	INT2STR_L2
			POP	    ; restore
			CALL	INT2STR_L2
			INCP
			LDM	
			PUSH	; 2nd BCD byte, save
			SWP	    ; high nibble first
			CALL	INT2STR_L2
			POP	    ; restore
			CALL	INT2STR_L2
			INCP
			LDM	
			SWP	    ; 3rd BCD byte, high nibble only
			CALL	INT2STR_L2
			LIA	    00  ; close string
			IYS
			
			; done
			RTN  


; BCD byte low nibble to ASCII, skipping leading zeros
INT2STR_L2:
			ANIA	0x0F        ; take nibble
			CPIA    0x00
			JRNZP   INT2STR_L8  ; digit is NOT a 0 - print
			EXAB
			CPIA    0x00        ; check B: first non-zero digit flag
			JRZP    INT2STR_L9  ; not set yet: skip digit (note both A and B are 0)
INT2STR_L8:
			LIB     1           ; set non-zero digit flag
			ADIA	0x30        ; add ASCII value for '0'
			IYS	                ; store character: Y + 1 -> Y, Y -> DP, A -> (DP)
INT2STR_L9:
			RTN	


INT2STR_L0:
; two-bytes to BCD conversion and accumulate
; Input byte in A
; (1A-1C) keeps temporary multiplier
; result in (12-14) (BCD, no more than 5 digits)
; K (08) is preset to 7 
			LII		0x02        ; operations on 3 bytes (BCD)
INT2STR_L6:	SR	
			JRNCP	INT2STR_L7  ; if (0E)lsb = 0
			LP		0x14
			LIQ		0x1C
			ADW	                ; (12-14) + (1A-1C) -> (12-14) (BCD)
INT2STR_L7:	LP		0x1C
			LIQ		0x1C
			ADW	                ; (1A-1C) * 2 -> (1A-1C) (BCD)
			DECK                ; K â€“ 1 -> K    ; K: (08)
			JRNCM	INT2STR_L6
			RTN
